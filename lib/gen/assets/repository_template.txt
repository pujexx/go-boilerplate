package repository

import (
    "strings"
    "fmt"
    "gorm.io/gorm"
    "{{module_name}}/domain"
    "{{module_name}}/lib"
{{import}}
)


type {{table_title}}Repository struct {
	DB *gorm.DB
}


func New{{domain_struct}}Repository(db *gorm.DB) domain.{{domain_struct}}Repository {
	return &{{table_title}}Repository{
		DB:db,
	}
}

func ({{initial_table}}R {{table_title}}Repository ) Save({{initial_table}} *domain.{{domain_struct}}) error {
     err := {{initial_table}}R.DB.Save({{initial_table}}).Error
     return err
}

func ({{initial_table}}R {{table_title}}Repository ) Update({{initial_table}} *domain.{{domain_struct}}) error {
     err := {{initial_table}}R.DB.Save({{initial_table}}).Error
     return err
}

func ({{initial_table}}R {{table_title}}Repository ) ByID(id string) (domain.{{domain_struct}},error) {
    var {{initial_table}} domain.{{domain_struct}}
   	err := {{initial_table}}R.DB.Where("{{primary_key}} = ?",id).First(&{{initial_table}}).Error
   	return {{initial_table}}, err
}
func ({{initial_table}}R {{table_title}}Repository ) Find(page int, filters []lib.FilterDomain)([]domain.{{domain_struct}},lib.Paginator) {
    var {{initial_table}}s []domain.{{domain_struct}}
    db := {{initial_table}}R.DB
    conditions := []string{}

    for _, where := range filters {
        conditions = append(conditions,fmt.Sprintf("%v %v %v", where.Field, where.Op, where.Value))
    }
    if len(filters) > 0 {
        db = db.Where(strings.Join(conditions," AND "))
    }

    paginate := lib.Paginate(&{{initial_table}}s, &lib.Param{
        DB:     db ,
        Page:    page,
        PerPage: 20,
        OrderBy: 0,
    })
    return {{initial_table}}s, paginate
}
func ({{initial_table}}R {{table_title}}Repository ) Delete(id string) error {
    return {{initial_table}}R.DB.Where("{{primary_key}} = ?", id).Delete(&domain.{{domain_struct}}{}).Error
}