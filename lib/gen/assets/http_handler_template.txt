package http

import (
	"encoding/json"
	"fmt"
	"github.com/gorilla/mux"
	"{{module_name}}/domain"
	"{{module_name}}/lib"
	"net/http"
	"strconv"
)

type {{table_title}}HttpHandler struct {
	Service domain.{{domain_struct}}Service
}

func New{{domain_struct}}HttpHandler(r *mux.Router, service domain.{{domain_struct}}Service) lib.BaseHandler {
	h := {{table_title}}HttpHandler{
		Service: service,
	}
	r.HandleFunc("/{{table_name}}",h.Store).Methods("POST")
	r.HandleFunc("/{{table_name}}/{id}",h.Delete).Methods("DELETE")
	r.HandleFunc("/{{table_name}}",h.Update).Methods("PUT")
	r.HandleFunc("/{{table_name}}",h.List).Methods("GET")
	r.HandleFunc("/{{table_name}}/range",h.ListRange).Methods("GET")
	r.HandleFunc("/{{table_name}}/{id}",h.Detail).Methods("GET")
	return &h
}

// {{table_name}} godoc
// @Summary Add {{table_name}}
// @Description Add {{table_name}}
// @Tags {{table_name}}
// @Accept  json
// @Produce  json
// @Param {{table_name}} body {{domain_struct}}Parameter true "add {{table_name}}"
// @Success 200 {object} lib.Response
// @Failure 400 {object} lib.ResponseError
// @Router /{{table_name}} [post]
func (a {{table_title}}HttpHandler) Store(w http.ResponseWriter, r *http.Request) {
	var {{table_title}}Parameter {{domain_struct}}Parameter
	decoder := json.NewDecoder(r.Body)
	if err := decoder.Decode(&{{table_title}}Parameter); err != nil {
		fmt.Println(err)
		lib.BaseResponse(lib.ResponseError{
			Code:    "402",
			Message: "Unprocessable entity",
			Errors:  []lib.ValidateError{{Field: "json", Error:"invalid json format" }},
		},w,r)
		return
	}

	if s,err := lib.ValidateStruct({{table_title}}Parameter) ; !s{
		lib.BaseResponse(lib.ResponseError{
			Code:    "402",
			Message: "Validation errors",
			Errors:  err,
		},w,r)
		return
	}
	{{table_title}}Domain := domain.{{domain_struct}}{
{{fields_assign}}
	}
	a.Service.Save(&{{table_title}}Domain)
	lib.BaseResponse(lib.Response{
		Code: "200",
		Data: "Success Created",
	},w,r)
	return
}

// {{table_name}} godoc
// @Summary delete {{table_name}}
// @Description delete {{table_name}}
// @Tags {{table_name}}
// @Accept  json
// @Produce  json
// @Param  id path string true "{{table_name}} ID" Format(string)
// @Success 200 {object} lib.Response
// @Failure 400 {object} lib.ResponseError
// @Router /{{table_name}}/{id} [delete]
func (a {{table_title}}HttpHandler) Delete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	id := params["id"]
	if s,err := lib.ValidateVar(id,"{{primary_key}}","required") ; !s{
		lib.BaseResponse(lib.ResponseError{
			Code:    "402",
			Message: "Validation errors",
			Errors: err ,
		},w,r)
		return
	}

	a.Service.Delete(id)
	lib.BaseResponse(lib.Response{
		Code: "200",
		Data: "Success Deleted",
	},w,r)
}

// {{table_name}} godoc
// @Summary Update {{table_name}}
// @Description Update {{table_name}}
// @Tags {{table_name}}
// @Accept  json
// @Produce  json
// @Param {{table_name}} body {{domain_struct}}Parameter true "add {{table_name}}"
// @Success 200 {object} lib.Response
// @Failure 400 {object} lib.ResponseError
// @Router /{{table_name}} [put]
func (a {{table_title}}HttpHandler) Update(w http.ResponseWriter, r *http.Request) {
	var {{table_title}}Parameter {{domain_struct}}Parameter
	decoder := json.NewDecoder(r.Body)
	if err := decoder.Decode(&{{table_title}}Parameter); err != nil {
		fmt.Println(err)
		lib.BaseResponse(lib.ResponseError{
			Code:    "402",
			Message: "Unprocessable entity",
			Errors:  []lib.ValidateError{{Field: "json", Error:"invalid json format" }},
		},w,r)
		return
	}

	if s,err := lib.ValidateVar({{table_title}}Parameter.{{primary_key_title}},"{{primary_key}}","required") ; !s{
		lib.BaseResponse(lib.ResponseError{
			Code:    "402",
			Message: "Validation errors",
			Errors:  err,
		},w,r)
		return
	}
	if s,err := lib.ValidateStruct({{table_title}}Parameter) ; !s{
		lib.BaseResponse(lib.ResponseError{
			Code:    "402",
			Message: "Validation errors",
			Errors:  err,
		},w,r)
		return
	}
	{{table_title}}Domain := domain.{{domain_struct}}{
{{fields_assign}}
    }
	a.Service.Update(&{{table_title}}Domain)
	lib.BaseResponse(lib.Response{
		Code: "200",
		Data: "Success Created",
	},w,r)
	return
}


// {{table_name}} godoc
// @Summary List {{table_name}}
// @Description List {{table_name}}
// @Tags {{table_name}}
// @Accept  json
// @Produce  json
// @Param  page query int false "Page" Format(int)
// @Success 200 {object} lib.Response
// @Failure 400 {object} lib.ResponseError
// @Router /{{table_name}} [get]
func (a {{table_title}}HttpHandler) List(w http.ResponseWriter, r *http.Request) {
	pageString := r.URL.Query().Get("page")
	page , err := strconv.Atoi(pageString)
	if err != nil {
		page = 1
	}
	_ , b := a.Service.Find(page,[]lib.FilterDomain{})

	lib.BaseResponse(lib.Response{
		Code: "200",
		Data: b.Data,
		Meta: b.Meta,
	},w,r)
}


// {{table_name}} godoc
// @Summary List Range {{table_name}}
// @Description List Range {{table_name}}
// @Tags {{table_name}}
// @Accept  json
// @Produce  json
// @Param from query string true "date start" Format(date)
// @Param to query string true "date end" Format(date)
// @Success 200 {object} lib.Response
// @Failure 400 {object} lib.ResponseError
// @Router /{{table_name}}/range [get]
func (a {{table_title}}HttpHandler)  ListRange(w http.ResponseWriter, r *http.Request) {
	from := r.URL.Query().Get("from")
	to := r.URL.Query().Get("to")
	dateFrom := lib.DateFormat(from)
	dateTo := lib.DateFormat(to)

	fmt.Println(dateFrom, dateTo, lib.DateRange(dateFrom, dateTo))
	err, b := a.Service.FindRange(dateFrom, dateTo)

	if err != nil {
		lib.BaseResponse(lib.ResponseError{
			Code:    "404",
			Message: err.Error(),
		}, w,r)
		return
	}

	lib.BaseResponse(lib.Response{
		Code: "200",
		Data: &b,
	},w,r)
	return
}

// {{table_name}} godoc
// @Summary Detail {{table_name}}
// @Description Detail {{table_name}}
// @Tags {{table_name}}
// @Accept  json
// @Produce  json
// @Param id path string true "id" Format(string)
// @Success 200 {object} lib.Response
// @Failure 400 {object} lib.ResponseError
// @Router /{{table_name}}/{id} [get]
func (a {{table_title}}HttpHandler) Detail(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	id := params["id"]
	if s,err := lib.ValidateVar(id,"{{primary_key}}","required") ; !s{
		lib.BaseResponse(lib.ResponseError{
			Code:    "402",
			Message: "Validation errors",
			Errors: err ,
		},w,r)
		return
	}
	object , err := a.Service.ByID(id)
	if err != nil {
		lib.BaseResponse(lib.ResponseError{
			Code:    "404",
			Message: "Object not found",
		},w,r)
		return
	}
	lib.BaseResponse(lib.Response{
		Code: "200",
		Data: object,
	},w,r)
}



